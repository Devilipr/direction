package com.thinkgem.jeesite.modules.liux.vpfckhz.web;


import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.liux.delivery.entity.Delivery;
import com.thinkgem.jeesite.modules.liux.delivery.entity.DeliveryDes;
import com.thinkgem.jeesite.modules.liux.delivery.service.DeliveryDesService;
import com.thinkgem.jeesite.modules.liux.vpfckhz.entity.Vpfckhz;
import com.thinkgem.jeesite.modules.liux.vpfckhz.service.VpfckhzService;
import com.thinkgem.jeesite.modules.liux.vpfckmx.entity.Vpfckmx;
import com.thinkgem.jeesite.modules.liux.vpfckmx.service.VpfckmxService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

/**
 * 出库主表信息
 * @author zhao
 *
 */
@Controller
@RequestMapping(value = "${adminPath}/vpfckhz/vpfckhz")
public class VpfckhzController  extends BaseController {
	@Autowired
	private VpfckhzService vpfckhzService;

	@Autowired
	private VpfckmxService vpfckmxService;

	@Autowired
	private DeliveryDesService deliveryDesService;

	@ModelAttribute
	public Vpfckhz get(@RequestParam(required=false) String id) {
		Vpfckhz entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = vpfckhzService.get(id);
		}
		if (entity == null){
			entity = new Vpfckhz();
		}
		return entity;
	}
	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = {"list", ""})
	public String list(Vpfckhz vpfckhz, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Vpfckhz> page = vpfckhzService.findPage(new Page<Vpfckhz>(request, response), vpfckhz); 
		model.addAttribute("page", page);
		return "modules/liuxxt/vpfckhzList";
	}
	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "form")
	public String form(Vpfckhz vpfckhz, Model model) {
		model.addAttribute("vpfckhz", vpfckhz);
		return "modules/liuxxt/vpfckhzForm";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:edit")
	@RequestMapping(value = "save")
	public String save(Vpfckhz vpfckhz, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, vpfckhz)){
			return form(vpfckhz, model);
		}
		vpfckhzService.save(vpfckhz);
		addMessage(redirectAttributes, "保存入存成功");
		return "redirect:"+Global.getAdminPath()+"/vpfckhz/vpfckhz/?repage";
	}
	
	@RequiresPermissions("vpfckhz:vpfckhz:edit")
	@RequestMapping(value = "delete")
	public String delete(Vpfckhz vpfckhz, RedirectAttributes redirectAttributes) {
		vpfckhzService.delete(vpfckhz);
		addMessage(redirectAttributes, "删除入库成功");
		return "redirect:"+Global.getAdminPath()+"/vpfckhz/vpfckhz/?repage";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "details")
	public String details(Vpfckhz vpfckhz, Model model, HttpServletRequest request, HttpServletResponse response) {
		vpfckhz = vpfckhzService.getByDjbh(vpfckhz.getDjbh());
		Vpfckmx vpfckmx = new Vpfckmx();
		vpfckmx.setDjbh(vpfckhz.getDjbh());
		Page<Vpfckmx> page = vpfckmxService.findPage(new Page<Vpfckmx>(request, response), vpfckmx);
		model.addAttribute("page", page);
		model.addAttribute("vpfckhz", vpfckhz);
		return "modules/liuxxt/vpfckmxDetails";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "delivery")
	public @ResponseBody
	List<Vpfckmx> getCkmxData (String picis, String djbh, String drugTypes) {
		String[] piciArray = picis.split(",");
		String[] drugTypeArray = null;
		if (StringUtils.isNoneBlank(drugTypes)) {
			drugTypeArray = drugTypes.split(",");
		}
		List<Vpfckmx> ckmxList = vpfckmxService.findCkmxList(piciArray, djbh);
		for (Vpfckmx mx : ckmxList) {
			DeliveryDes deliveryDes = new DeliveryDes();
			deliveryDes.setDrugTypes(drugTypeArray);
//			deliveryDes.setDjbh(mx.getDjbh());
			Delivery delivery = new Delivery();
			delivery.setPici(mx.getPici());
			deliveryDes.setPici(delivery);
			List<DeliveryDes> deliveryDesList = deliveryDesService.findList(deliveryDes);
			mx.setDeliveryDesList(deliveryDesList);
		}
		return ckmxList;
	}

	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "deliveryUpdateStatus")
	public @ResponseBody
	List<Vpfckmx> getCkmxDyData (String picis, String djbh, String drugTypes) {
		String[] piciArray = picis.split(",");
		String[] drugTypeArray = null;
		if (StringUtils.isNoneBlank(drugTypes)) {
			drugTypeArray = drugTypes.split(",");
		}
		List<Vpfckmx> ckmxList = vpfckmxService.findCkmxList(piciArray, djbh);
		for (Vpfckmx mx : ckmxList) {
			DeliveryDes deliveryDes = new DeliveryDes();
			deliveryDes.setDrugTypes(drugTypeArray);
//			deliveryDes.setDjbh(mx.getDjbh());
			Delivery delivery = new Delivery();
			delivery.setPici(mx.getPici());
			deliveryDes.setPici(delivery);
			List<DeliveryDes> deliveryDesList = deliveryDesService.findList(deliveryDes);
			for (int i = 0; i < deliveryDesList.size(); i++) {
				DeliveryDes deliveryds=deliveryDesList.get(i);
				deliveryds.setStatusType(1);
				deliveryDesService.updateStatus(deliveryds.getStatusType(), deliveryds.getId());
			}
			mx.setDeliveryDesList(deliveryDesList);
		}
		return ckmxList;
	}
    @RequiresPermissions("vpfckhz:vpfckhz:view")
    @RequestMapping(value = "download")
	public @ResponseBody Map<String, Object> download(String djbh, String drugTypes, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
        String contextPath = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath("/");
		try {
			String zipfile = "zipfiles/" + System.currentTimeMillis() + ".zip";
			String downloadUrl = deliveryDesService.getDownloadUrl(djbh, drugTypes, contextPath, zipfile);
			if (StringUtils.isNoneBlank(downloadUrl)) {
				map.put("url", request.getContextPath() + "/" + zipfile);
				map.put("status", 1);
			} else {
				map.put("msg", "没有数据可下载");
				map.put("status", 0);
			}
		} catch (IOException e) {
			logger.error("文件打包下载出错：", e);
			map.put("msg", "服务器异常无法下载");
			map.put("status", 0);
		}
	    return map;
    }

    @GetMapping(value = "/toPrint")
    public String toPrint(Integer statusType, Model model, HttpServletRequest request, HttpServletResponse response) {
		Vpfckmx vpfckmx = new Vpfckmx();
		Page<Vpfckmx> page = vpfckmxService.findListByStatus(new Page<Vpfckmx>(request, response), vpfckmx);	//用于展示的打印明细信息
		List<Map<String, Object>> printList = deliveryDesService.findPrintList();	//用于打印的实际数据
		model.addAttribute("page", page);
		model.addAttribute("printList", printList);
		return "modules/liuxxt/print";
	}

	@RequestMapping(value = "/updateStatus")
	public @ResponseBody void updateStatus(String picis) {
        Set<String> set = new HashSet<String>();
        if (StringUtils.isNoneBlank(picis)) {
            String[] piciArray = picis.split(",");
            List<String> list = Arrays.asList(piciArray);
            set.addAll(list);
        }
        for (String pici : set) {
            DeliveryDes deliveryDes = new DeliveryDes();
            Delivery delivery = new Delivery();
            delivery.setPici(pici);
            deliveryDes.setPici(delivery);
            List<DeliveryDes> deliveryDesList = deliveryDesService.findList(deliveryDes);
            for (DeliveryDes des : deliveryDesList) {
                des.setStatusType(1);
                deliveryDesService.updateStatus(des.getStatusType(), des.getId());
            }
        }
    }
}

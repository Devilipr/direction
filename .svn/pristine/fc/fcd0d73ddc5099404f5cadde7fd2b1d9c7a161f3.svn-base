package com.thinkgem.jeesite.modules.liux.vpfckhz.web;


import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.liux.delivery.entity.Delivery;
import com.thinkgem.jeesite.modules.liux.delivery.entity.DeliveryDes;
import com.thinkgem.jeesite.modules.liux.delivery.service.DeliveryDesService;
import com.thinkgem.jeesite.modules.liux.vpfckhz.entity.Vpfckhz;
import com.thinkgem.jeesite.modules.liux.vpfckhz.service.VpfckhzService;
import com.thinkgem.jeesite.modules.liux.vpfckmx.entity.Vpfckmx;
import com.thinkgem.jeesite.modules.liux.vpfckmx.service.VpfckmxService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * 出库主表信息
 * @author zhao
 *
 */
@Controller
@RequestMapping(value = "${adminPath}/vpfckhz/vpfckhz")
public class VpfckhzController  extends BaseController {
	@Autowired
	private VpfckhzService vpfckhzService;

	@Autowired
	private VpfckmxService vpfckmxService;

	@Autowired
	private DeliveryDesService deliveryDesService;

	@ModelAttribute
	public Vpfckhz get(@RequestParam(required=false) String id) {
		Vpfckhz entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = vpfckhzService.get(id);
		}
		if (entity == null){
			entity = new Vpfckhz();
		}
		return entity;
	}
	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = {"list", ""})
	public String list(Vpfckhz vpfckhz, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Vpfckhz> page = vpfckhzService.findPage(new Page<Vpfckhz>(request, response), vpfckhz); 
		model.addAttribute("page", page);
		return "modules/liuxxt/vpfckhzList";
	}
	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "form")
	public String form(Vpfckhz vpfckhz, Model model) {
		model.addAttribute("vpfckhz", vpfckhz);
		return "modules/liuxxt/vpfckhzForm";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:edit")
	@RequestMapping(value = "save")
	public String save(Vpfckhz vpfckhz, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, vpfckhz)){
			return form(vpfckhz, model);
		}
		vpfckhzService.save(vpfckhz);
		addMessage(redirectAttributes, "保存入存成功");
		return "redirect:"+Global.getAdminPath()+"/vpfckhz/vpfckhz/?repage";
	}
	
	@RequiresPermissions("vpfckhz:vpfckhz:edit")
	@RequestMapping(value = "delete")
	public String delete(Vpfckhz vpfckhz, RedirectAttributes redirectAttributes) {
		vpfckhzService.delete(vpfckhz);
		addMessage(redirectAttributes, "删除入库成功");
		return "redirect:"+Global.getAdminPath()+"/vpfckhz/vpfckhz/?repage";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "details")
	public String details(Vpfckhz vpfckhz, Model model, HttpServletRequest request, HttpServletResponse response) {
		vpfckhz = vpfckhzService.getByDjbh(vpfckhz.getDjbh());
		Vpfckmx vpfckmx = new Vpfckmx();
		vpfckmx.setDjbh(vpfckhz.getDjbh());
		Page<Vpfckmx> page = vpfckmxService.findPage(new Page<Vpfckmx>(request, response), vpfckmx);
		model.addAttribute("page", page);
		model.addAttribute("vpfckhz", vpfckhz);
		return "modules/liuxxt/vpfckmxDetails";
	}

	@RequiresPermissions("vpfckhz:vpfckhz:view")
	@RequestMapping(value = "delivery")
	public @ResponseBody
	List<Vpfckmx> getCkmxData (String picis, String djbh, String drugTypes) {
		String[] piciArray = picis.split(",");
		String[] drugTypeArray = null;
		if (StringUtils.isNoneBlank(drugTypes)) {
			drugTypeArray = drugTypes.split(",");
		}
		List<Vpfckmx> ckmxList = vpfckmxService.findCkmxList(piciArray, djbh);
		for (Vpfckmx mx : ckmxList) {
			DeliveryDes deliveryDes = new DeliveryDes();
			deliveryDes.setDrugTypes(drugTypeArray);
//			deliveryDes.setDjbh(mx.getDjbh());
			Delivery delivery = new Delivery();
			delivery.setPici(mx.getPici());
			deliveryDes.setPici(delivery);
			List<DeliveryDes> deliveryDesList = deliveryDesService.findList(deliveryDes);
			mx.setDeliveryDesList(deliveryDesList);
		}
		return ckmxList;
	}

    @RequiresPermissions("vpfckhz:vpfckhz:view")
    @RequestMapping(value = "download")
	public @ResponseBody Map<String, Object> download(String djbh, String drugTypes, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
        String contextPath = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath("/");
        Vpfckmx vpfckmx = new Vpfckmx();
        vpfckmx.setDjbh(djbh);
        List<Vpfckmx> list = vpfckmxService.findList(vpfckmx);
        StringBuilder sb = new StringBuilder();
        for (Vpfckmx mx : list) {
            sb.append(mx.getPici());
            sb.append(",");
        }
        String picis = sb.toString();
        if (StringUtils.isNoneBlank(picis)) {
            String[] piciArray = picis.split(",");
			String[] drugTypeArray = null;
			if (StringUtils.isNoneBlank(drugTypes)) {
				drugTypeArray = drugTypes.split(",");
			}
			DeliveryDes deliveryDes = new DeliveryDes();
			deliveryDes.setPiciArray(piciArray);
			deliveryDes.setDrugTypes(drugTypeArray);
            List<DeliveryDes> allList = deliveryDesService.findAllList(deliveryDes);
            if (allList.isEmpty() && allList.size() == 0) {
            	map.put("msg", "没有数据可下载");
            	map.put("status", 0);
                return map;
            }
            Set<File> fileList = new HashSet<File>();
            for (DeliveryDes des : allList) {
                fileList.add(new File(contextPath + "/upload/" + des.getImgurl()));
            }
            File[] files = fileList.toArray(new File[]{});

            byte[] buf = new byte[1024];
            try {
                String zipfile = "/zipfiles/" + System.currentTimeMillis() + ".zip";
                ZipOutputStream out = new ZipOutputStream(new FileOutputStream(contextPath + zipfile));
                for (int i = 0; i < files.length; i++) {
                    FileInputStream in = new FileInputStream(files[i]);
                    out.putNextEntry(new ZipEntry(files[i].getName()));
                    int len;
                    while ((len = in.read(buf)) > 0) {
                        out.write(buf, 0, len);
                    }
                    out.closeEntry();
                    in.close();
                }
                out.close();
//                response.sendRedirect(request.getContextPath() + "/" + zipfile);
				map.put("url", request.getContextPath() + "/" + zipfile);
				map.put("status", 1);
            } catch (IOException e) {
                logger.error("文件打包下载出错：", e);
				map.put("msg", "服务器异常无法下载");
				map.put("status", 0);
            }
        }
	    return map;
    }
}

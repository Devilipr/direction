/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.liux.mchk.web;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.liux.mchk.entity.Mchk;
import com.thinkgem.jeesite.modules.liux.mchk.entity.MchkDes;
import com.thinkgem.jeesite.modules.liux.mchk.service.MchkService;
import com.thinkgem.jeesite.modules.liux.vmchk.entity.Vmchk;
import com.thinkgem.jeesite.modules.liux.vmchk.service.VmchkService;

/**
 * 客商Controller
 * @author zyb
 * @version 2017-11-30
 */
@Controller
@RequestMapping(value = "${adminPath}/mchk/mchk")
public class MchkController extends BaseController {

	@Autowired
	private MchkService mchkService;
	@Autowired
	private VmchkService vmchkService;
	@ModelAttribute
	public Mchk get(@RequestParam(required=false) String id) {
		Mchk entity = null;
		Mchk mc=new Mchk();
		if (StringUtils.isNotBlank(id)){
			mc.setDwbh(id);
			entity = mchkService.get(mc);
		}
		if (entity == null){
			entity = new Mchk();
		}
		return entity;
	}
	
	@RequiresPermissions("mchk:mchk:view")
	@RequestMapping(value = {"list", ""})
	public String list(Mchk mchk, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Mchk> page = mchkService.findPage(new Page<Mchk>(request, response), mchk); 
		model.addAttribute("page", page);
		return "modules/liuxxt/mchkList";
	}

	@RequiresPermissions("mchk:mchk:view")
	@RequestMapping(value = "form")
	public String form(Mchk mchk, Model model) {
		if(mchk.getDrugType()==null){
			mchk.setDrugType("0");
		}
		Vmchk vmchk=vmchkService.get(mchk.getId());
		MchkDes mchkDes=new MchkDes();
		mchkDes.setDrugType(mchk.getDrugType());
		mchkDes.setDwbh(mchk);
		List<MchkDes> mchkDesList = mchkService.findHighDesList(mchkDes);
		model.addAttribute("vmchk", vmchk);
		model.addAttribute("mchkDesList", mchkDesList);
		model.addAttribute("mchk", mchk);
		return "modules/liuxxt/mchkForm";
	}

	@RequiresPermissions("mchk:mchk:edit")
	@RequestMapping(value = "save")
	public String save(Mchk mchk, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, mchk)){
			return form(mchk, model);
		}
		mchkService.save(mchk);
		addMessage(redirectAttributes, "保存客商成功");
		return "redirect:"+Global.getAdminPath()+"/mchk/mchk/?repage";
	}
	@RequiresPermissions("mchk:mchk:edit")
	@RequestMapping(value = {"localUpload"})
	public String localUpload(Mchk mchk,HttpServletRequest request, HttpServletResponse response,@RequestParam("file") CommonsMultipartFile file, Model model,RedirectAttributes redirectAttributes){
		
			String savePath=null;
			String fileName=System.currentTimeMillis()+".jpg";
			try {
				savePath = request.getSession().getServletContext().getRealPath("/") + "upload" + "/"+"kszz"+"/";
				logger.info("==>上传文件路径：{}", savePath);
				 //获取输出流
	            OutputStream os=new FileOutputStream(savePath+fileName);
	            //获取输入流 CommonsMultipartFile 中可以直接得到文件的流
	            byte[] buffer = new byte[1024 * 1024];  
	            InputStream is=file.getInputStream();
	            //一个一个字节的读取并写入
	            int length;  
	            while ((length = is.read(buffer)) > 0) {  
	              os.write(buffer, 0, length);  
	            }
	           os.flush();
	           os.close();
	           is.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String imgUrl="kszz/"+fileName;
			MchkDes mchkDes = new MchkDes();
			mchkDes.setDrugType(mchk.getDrugType());
			mchkDes.setDwbh(mchk);
			mchkDes.setDwmch(mchk.getDwmch());
			mchkDes.setImgurl(imgUrl);
			List<MchkDes> mchkDesList =new ArrayList<MchkDes>();
			mchkDesList.add(mchkDes);
			mchk.setMchkDesList(mchkDesList);
			mchkService.save(mchk);
		return "redirect:"+Global.getAdminPath()+"/mchk/mchk/form/?id="+mchk.getDwbh()+"&repage";
	}
	@RequiresPermissions("mchk:mchk:edit")
	@RequestMapping(value = "delete")
	public String delete(Mchk mchk,String no,String id, RedirectAttributes redirectAttributes) {
		MchkDes mchkDes =new MchkDes();
		mchkDes.setId(no);
		mchkService.deleteImg(mchkDes);
		addMessage(redirectAttributes, "删除成功");
		return "redirect:"+Global.getAdminPath()+"/mchk/mchk/form/?id="+id+"&repage";
	}

}
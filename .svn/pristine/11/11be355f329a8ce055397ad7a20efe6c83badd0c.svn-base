package com.thinkgem.jeesite.modules.liux.delivery.service;

import com.thinkgem.jeesite.common.service.CrudService;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.liux.delivery.dao.DeliveryDesDao;
import com.thinkgem.jeesite.modules.liux.delivery.entity.DeliveryDes;
import com.thinkgem.jeesite.modules.liux.vpfckmx.dao.VpfckmxDao;
import com.thinkgem.jeesite.modules.liux.vpfckmx.entity.Vpfckmx;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.ContextLoader;

import javax.annotation.Resource;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * Author: lyp
 * Create Date: 2018/1/27
 * Description:
 */
@Service
@Transactional(readOnly = true)
public class DeliveryDesService extends CrudService<DeliveryDesDao, DeliveryDes> {

    @Resource
    private VpfckmxDao vpfckmxDao;

    public List<DeliveryDes> findList(DeliveryDes deliveryDes) {
        return dao.findList(deliveryDes);
    }

    public List<DeliveryDes> findAllList(DeliveryDes deliveryDes) {
        return dao.findAllList(deliveryDes);
    }

    public String getDownloadUrl(String djbh, String drugTypes, String contextPath, String zipfile) throws IOException {
        Vpfckmx vpfckmx = new Vpfckmx();
        vpfckmx.setDjbh(djbh);
        List<Vpfckmx> list = vpfckmxDao.findList(vpfckmx);
        StringBuilder sb = new StringBuilder();
        for (Vpfckmx mx : list) {
            sb.append(mx.getPici());
            sb.append(",");
        }
        String picis = sb.toString();
        if (StringUtils.isNoneBlank(picis)) {
            String[] piciArray = picis.split(",");
            String[] drugTypeArray = null;
            if (StringUtils.isNoneBlank(drugTypes)) {
                drugTypeArray = drugTypes.split(",");
            }
            DeliveryDes deliveryDes = new DeliveryDes();
            deliveryDes.setPiciArray(piciArray);
            deliveryDes.setDrugTypes(drugTypeArray);
            List<DeliveryDes> allList = dao.findAllList(deliveryDes);
            if (allList.isEmpty() && allList.size() == 0) {
                return null;
            }
            Set<File> fileList = new HashSet<File>();
            for (DeliveryDes des : allList) {
                fileList.add(new File(contextPath + "upload/" + des.getImgurl()));
            }
            File[] files = fileList.toArray(new File[]{});

            byte[] buf = new byte[1024];
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(contextPath + zipfile));
            for (int i = 0; i < files.length; i++) {
                FileInputStream in = new FileInputStream(files[i]);
                out.putNextEntry(new ZipEntry(files[i].getName()));
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                out.closeEntry();
                in.close();
            }
            out.close();
        }
        return zipfile;
    }
}

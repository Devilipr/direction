package com.thinkgem.jeesite.modules.liux.vjhrkmx.web;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sun.jndi.toolkit.chars.BASE64Decoder;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.liux.delivery.entity.Delivery;
import com.thinkgem.jeesite.modules.liux.delivery.entity.DeliveryDes;
import com.thinkgem.jeesite.modules.liux.delivery.service.DeliveryService;
import com.thinkgem.jeesite.modules.liux.vjhrkhz.entity.Vjhrkhz;
import com.thinkgem.jeesite.modules.liux.vjhrkhz.service.VjhrkhzService;
import com.thinkgem.jeesite.modules.liux.vjhrkmx.entity.Vjhrkmx;
import com.thinkgem.jeesite.modules.liux.vjhrkmx.service.VjhrkmxService;
/**
 * 客商
 * @author zhao
 *
 */
@Controller
@RequestMapping(value = "${adminPath}/vjhrkmx/vjhrkmx")
public class VjhrkmxController  extends BaseController {
	@Autowired
	private VjhrkmxService VjhrkmxService;
	@Autowired
	private VjhrkhzService vijhkjzService;
	@Autowired
	private DeliveryService deliveryService;
	@ModelAttribute
	public Vjhrkmx get(@RequestParam(required=false) String id) {
		Vjhrkmx entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = VjhrkmxService.get(id);
		}
		if (entity == null){
			entity = new Vjhrkmx();
		}
		return entity;
	}
	@RequiresPermissions("vjhrkmx:vjhrkmx:view")
	@RequestMapping(value = {"list", ""})
	public String list(Vjhrkmx vjhrkmx, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Vjhrkmx> page = VjhrkmxService.findPage(new Page<Vjhrkmx>(request, response), vjhrkmx); 
		model.addAttribute("page", page);
		return "modules/liuxxt/vjhrkmxList";
	}
	@RequiresPermissions("Vjhrkmx:Vjhrkmx:view")
	@RequestMapping(value = "form")
	public String form(Vjhrkmx vjhrkmx,Delivery delivery, Model model) {
		model.addAttribute("vjhrkmx", vjhrkmx);
		model.addAttribute("delivery", delivery);
		return "modules/liuxxt/vjhrkmxCaptureVideo";
	}

	@RequiresPermissions("Vjhrkmx:Vjhrkmx:view")
	@RequestMapping(value = "formPs")
	public String formPs(Vjhrkmx vjhrkmx,Delivery delivery, Model model) {
		model.addAttribute("vjhrkmx", vjhrkmx);
		model.addAttribute("delivery", delivery);
		return "modules/liuxxt/vjhrkmxPsCaptureVideo";
	}
	
	@RequiresPermissions("vjhrkmx:vjhrkmx:edit")
	@RequestMapping(value = "delete")
	public String delete(Vjhrkmx vjhrkmx, RedirectAttributes redirectAttributes) {
		VjhrkmxService.delete(vjhrkmx);
		addMessage(redirectAttributes, "删除客商成功");
		return "redirect:"+Global.getAdminPath()+"/vjhrkmx/vjhrkmx/?repage";
	}
	@RequiresPermissions("vjhrkmx:vjhrkmx:view")
	@RequestMapping(value = {"updateVapure"})
	@ResponseBody
	public String updateVapure(Vjhrkmx vjhrkmx,String drugType,HttpServletRequest request, HttpServletResponse response, Model model){
		String url=request.getParameter("captureUrl");
		String savePath = request.getSession().getServletContext().getRealPath("/") + "upload" + "/"+"rksj"+"/";
		String fileName=System.currentTimeMillis()+".jpg";
		BASE64Decoder decoder = new BASE64Decoder();
		try {
			 //获取输出流
			 byte[] bytes = decoder.decodeBuffer(url);
		        for (int i = 0; i < bytes.length; ++i)
		        {
		            if (bytes[i] < 0)// 调整异常数据
		            {
		                bytes[i] += 256;
		            }
		        }
		        // 生成jpeg图片
		        OutputStream out = new FileOutputStream(savePath+fileName);
		        out.write(bytes);
		        out.flush();
		        out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String imgUrl="rksj/"+fileName;
		vjhrkmx=VjhrkmxService.get(vjhrkmx);
		if (vjhrkmx!=null) {
			List<DeliveryDes> deliveryDesList=new ArrayList<DeliveryDes>();
			DeliveryDes deliveryDes=new DeliveryDes();
			Delivery delivery=new Delivery();
			delivery.setPici(vjhrkmx.getPici());
			deliveryDes.setPici(delivery);
			deliveryDes.setDrugType(drugType);
			deliveryDes.setDjbh(vjhrkmx.getDjbh());
			deliveryDes.setDwbh(vjhrkmx.getDwbh());
			deliveryDes.setDwmch(vjhrkmx.getDwmch());
			deliveryDes.setRq(vjhrkmx.getRq());
			deliveryDes.setSpmch(vjhrkmx.getSpmch());
			deliveryDes.setZjm(vjhrkmx.getZjm());
			deliveryDes.setShpgg(vjhrkmx.getShpgg());
			deliveryDes.setShengccj(vjhrkmx.getShengccj());
			deliveryDes.setSpbh(vjhrkmx.getSpbh());
			deliveryDes.setPihao(vjhrkmx.getPihao());
			deliveryDes.setShl(vjhrkmx.getShl().toString());
			deliveryDes.setHsje(vjhrkmx.getHsje());
			deliveryDes.setImgurl(imgUrl);
			deliveryDesList.add(deliveryDes);
			delivery.setDeliveryDesList(deliveryDesList);
			delivery.setDjbh(vjhrkmx.getDjbh());
			delivery.setDeliveryId(IdGen.uuid());
			delivery.setDrugType(drugType);
			delivery.setSpbh(vjhrkmx.getSpbh());
			delivery.setDwbh(vjhrkmx.getDwbh());
			delivery.setDwmch(vjhrkmx.getDwmch());
			delivery.setRq(vjhrkmx.getRq());
			delivery.setSpmch(vjhrkmx.getSpmch());
			delivery.setZjm(vjhrkmx.getZjm());
			delivery.setShpgg(vjhrkmx.getShpgg());
			delivery.setShengccj(vjhrkmx.getShengccj());
			delivery.setPici(vjhrkmx.getPici());
			delivery.setPihao(vjhrkmx.getPihao());
			delivery.setShl(vjhrkmx.getShl().toString());
			delivery.setHsje(vjhrkmx.getHsje());
			deliveryService.save(delivery);
		 }
		return "";
	}
	
	@RequiresPermissions("vjhrkmx:vjhrkmx:view")
	@RequestMapping(value = {"updateVapureMx"})
	@ResponseBody
	public String updateVapureMx(Vjhrkmx vjhrkmx,String drugType,HttpServletRequest request, HttpServletResponse response, Model model){
		String uuid = IdGen.uuid();
		String fileName=System.currentTimeMillis()+".jpg";
		String imgUrl="rksj/"+fileName;
		List<Vjhrkmx> vjhrkmxList=VjhrkmxService.findList(vjhrkmx);
		Vjhrkhz vkjrkjz=vijhkjzService.getByDjbh(vjhrkmx.getDjbh());
		Delivery delivery=new Delivery();
		delivery.setPici(vjhrkmx.getPici());
		delivery.setDjbh(vkjrkjz.getDjbh());
		delivery.setDrugType(drugType);
		delivery.setDwbh(vkjrkjz.getDwbh());
		delivery.setDwmch(vkjrkjz.getDwmch());
		delivery.setRq(vkjrkjz.getRq());
		delivery.setHsje(vkjrkjz.getHsje());
		delivery.setImgurl(imgUrl);
		delivery.setDeliveryId(uuid);
		if(vjhrkmxList!=null){
			for (int i = 0; i < vjhrkmxList.size(); i++) {
				Vjhrkmx vjhrkmxs=vjhrkmxList.get(i);
				String url=request.getParameter("captureUrl");
				String savePath = request.getSession().getServletContext().getRealPath("/") + "upload" + "/"+"rksj"+"/";
				BASE64Decoder decoder = new BASE64Decoder();
				try {
					//获取输出流
					 byte[] bytes = decoder.decodeBuffer(url);
				        for (int j = 0; j < bytes.length; ++j)
				        {
				            if (bytes[j] < 0)// 调整异常数据
				            {
				                bytes[j] += 256;
				            }
				        }
				        // 生成jpeg图片
				        OutputStream out = new FileOutputStream(savePath+fileName);
				        out.write(bytes);
				        out.flush();
				        out.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					
					List<DeliveryDes> deliveryDesList=new ArrayList<DeliveryDes>();
					DeliveryDes deliveryDes=new DeliveryDes();
					deliveryDes.setPici(delivery);
					deliveryDes.setDrugType(drugType);
					deliveryDes.setDjbh(vjhrkmxs.getDjbh());
					deliveryDes.setDwbh(vjhrkmxs.getDwbh());
					deliveryDes.setDwmch(vjhrkmxs.getDwmch());
					deliveryDes.setRq(vjhrkmxs.getRq());
					deliveryDes.setSpmch(vjhrkmxs.getSpmch());
					deliveryDes.setZjm(vjhrkmxs.getZjm());
					deliveryDes.setShpgg(vjhrkmxs.getShpgg());
					deliveryDes.setShengccj(vjhrkmxs.getShengccj());
					deliveryDes.setSpbh(vjhrkmxs.getSpbh());
					deliveryDes.setPihao(vjhrkmxs.getPihao());
					deliveryDes.setShl(vjhrkmxs.getShl().toString());
					deliveryDes.setHsje(vjhrkmxs.getHsje());
					deliveryDes.setImgurl(imgUrl);
					delivery.setPici(vjhrkmxs.getPici());
					deliveryDes.setDeliveryId(uuid);
					deliveryDesList.add(deliveryDes);
					delivery.setDeliveryDesList(deliveryDesList);
					deliveryService.save(delivery);
			}
		}
		return "";
	}
}
